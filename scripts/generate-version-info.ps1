param(
  # Path to the .version file (default: project root .version)
  [string]$VersionFile = (Join-Path (Split-Path $PSScriptRoot -Parent) ".version"),
  # Output path for the PyInstaller version resource file
  [string]$OutFile     = (Join-Path (Split-Path $PSScriptRoot -Parent) "cabplanner_version_info.txt"),
  # Company / product metadata (override via CI env or args if you like)
  [string]$CompanyName = "Cabplanner Team",
  [string]$ProductName = "Cabplanner",
  [string]$FileDescription = "Cabplanner - Cabinet Design Planner",
  [string]$LegalCopyright = "(C) 2025 Cabplanner Team"
)

try {
  if (-not (Test-Path $VersionFile)) {
    throw "Version file not found at: $VersionFile"
  }

  $version = (Get-Content $VersionFile -ErrorAction Stop).Trim()
  if ($version -notmatch '^\d+(\.\d+){2,3}$') {
    throw "Invalid version '$version'. Expected e.g. 1.0.0 or 1.0.0.8"
  }

  # Convert 1.2.3(.4) -> 1,2,3,4  (pad to 4 parts for Windows resource)
  $parts = $version.Split('.')
  while ($parts.Count -lt 4) { $parts += '0' }
  $versionTuple = ($parts -join ',')

  $content = @"
# Auto-generated by generate-version-info.ps1 â€” DO NOT EDIT
VSVersionInfo(
  ffi=FixedFileInfo(
    filevers=($versionTuple),
    prodvers=($versionTuple),
    mask=0x3f,
    flags=0x0,
    OS=0x40004,
    fileType=0x1,
    subtype=0x0,
    date=(0, 0)
  ),
  kids=[
    StringFileInfo([
      StringTable(
        u'040904B0', [
          StringStruct(u'CompanyName', u'$CompanyName'),
          StringStruct(u'FileDescription', u'$FileDescription'),
          StringStruct(u'FileVersion', u'$version'),
          StringStruct(u'InternalName', u'cabplanner'),
          StringStruct(u'OriginalFilename', u'cabplanner.exe'),
          StringStruct(u'ProductName', u'$ProductName'),
          StringStruct(u'ProductVersion', u'$version'),
          StringStruct(u'LegalCopyright', u'$LegalCopyright')
        ])
    ]),
    VarFileInfo([VarStruct(u'Translation', [1033, 1200])])
  ]
)
"@

  $content | Out-File -FilePath $OutFile -Encoding utf8
  Write-Host "Generated version resource: $OutFile (version $version)"
  exit 0
}
catch {
  Write-Error $_.Exception.Message
  exit 1
}
