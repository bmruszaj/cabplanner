name: Build and Release

on:
  workflow_run:
    workflows: ["Python CI"]
    types:
      - completed
    branches:
      - main

permissions:
  contents: write

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Generate version from tags
        shell: pwsh
        run: |
          # Run version generation script
          python scripts/generate_version.py
          
          # Read the generated version
          $VERSION = Get-Content .version
          echo "VERSION=$VERSION" >> $env:GITHUB_ENV
          
          # For release tag, ensure consistent format
          echo "RELEASE_TAG=v$VERSION" >> $env:GITHUB_ENV

      - name: Generate version resource
        shell: pwsh
        run: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          ./scripts/generate-version-info.ps1 `
            -VersionFile .version `
            -OutFile cabplanner_version_info.txt `
            -CompanyName "Cabplanner Team" `
            -ProductName "Cabplanner" `
            -FileDescription "Cabplanner - Cabinet Design Planner" `
            -LegalCopyright "(C) 2025 Cabplanner Team"
          if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }

      - name: Run PyInstaller build script
        shell: pwsh
        run: ./scripts/build.ps1

      - name: Create ZIP with cabplanner folder
        run: |
          Compress-Archive -Path dist/cabplanner -DestinationPath "cabplanner-${env:VERSION}.zip"
          echo "ZIP_NAME=cabplanner-${env:VERSION}.zip" >> $env:GITHUB_ENV

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_TAG }}
          name: Cabplanner ${{ env.VERSION }}
          files: ${{ env.ZIP_NAME }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
